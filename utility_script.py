# simple script used to generate signatures and keys
import ecies
import subprocess
import base64
from ecies import encrypt, decrypt

# generating scriptPubKey
# echo -n $PUB_KEY | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160
pub_key = 0x8b7b944c1a7312b0c41f1b3b780d96f9d1edb40aea5bbcd95cd591811363f151222434a1f7cd73765c5df6f94c1afc062bf32c02ca8da44ceeb781ff9d500165
pub_key_string = '0x8b7b944c1a7312b0c41f1b3b780d96f9d1edb40aea5bbcd95cd591811363f151222434a1f7cd73765c5df6f94c1afc062bf32c02ca8da44ceeb781ff9d500165'
# not in order to generate the OP_160 hash which will match the stored scriptPubKey, we need to convert from string base
script_pub_key = subprocess.check_output('echo -n '+hex(int(pub_key_string, 16))+' | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160', shell=True)
script_pub_key_string = script_pub_key.decode('utf-8')
# retrieve only the hex value generated by the scriptPubKey command
script_pub_key_string = script_pub_key_string.split(' ')[1].strip()
print('scriptPubKey: {}'.format(script_pub_key_string))
priv_key = 0xa2bc5e616913c367314de49dd93bd76638411a01d2362e5a01c1418a199929fb
to_be_signed = b'\x04\x9f\xda\xc7# \x00\x8bR\x85\xdb4\x88\x02\x95\xc5D\xf3\xf11\x18\xbb\x0094\n\x1e\xb8\xab\xf6\x96\x00?i$\"\xf7\x8b\x92-\xceJ\xcf^xh;o\x82\xb3\x0fC\x05M\x19?M\xa6\xe9\xff\xbd!\xd0~\x90\xcf\xc4\x1a\xdd\xd6\x1cX\xbb.E\x19d\n\"\x11\x94\xbb\xe6,7O\xa3\x9e:e\xfdkR&\xefW\x06\xc80\x0e\x96\xd5\xbc\xdb\xcd\x99\x9e\x11x\x04\xf6 2\xe2\xee\xa0\xa9\x12\xfcy\x82\x1d\x86L\xaa\xb4M1_}\x90\x98\xd1'
ecies_priv_key = ecies.hex2prv(hex(priv_key))
ecies_priv_key.public_key = ecies.hex2pub(hex(pub_key))
decrypted_result = decrypt(hex(priv_key), to_be_signed)
print('decrypted result:')
print(decrypted_result.decode('utf-8'))
signature = ecies_priv_key.sign(decrypted_result)
print('signed with private:')
print(signature)
encoded_signature = base64.b64encode(signature)
print('enncoded signature: ')
print(encoded_signature)
decoded_signature = base64.b64decode(encoded_signature)
print('decoded signature')
print(decoded_signature)
ecies_pub_key = ecies.hex2pub(hex(pub_key))
result = ecies_pub_key.verify(signature, decrypted_result)
if result:
    print('matched public key verification')
else:
    print('did not match public key verification')
