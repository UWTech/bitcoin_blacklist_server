# simple script used to generate signatures and keys
import ecies
import subprocess
import base64
from ecies import encrypt, decrypt
'''
key = ecies.utils.generate_eth_key()
priv_key = key.to_hex()
print('private key:')
print(priv_key)
pub_key = key.public_key.to_hex()
print('public key:')
print(pub_key)
'''
# generating scriptPubKey
# echo -n $PUB_KEY | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160
pub_key = 0x8b7b944c1a7312b0c41f1b3b780d96f9d1edb40aea5bbcd95cd591811363f151222434a1f7cd73765c5df6f94c1afc062bf32c02ca8da44ceeb781ff9d500165
command = 'echo -n {} | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160'.format(pub_key)
script_pub_key = subprocess.check_output(command, shell=True)
script_pub_key_string = script_pub_key.decode('utf-8')
# retrieve only the hex value generated by the scriptPubKey command
script_pub_key_string = script_pub_key_string.split(' ')[1].strip()
print('scriptPubKey: {}'.format(script_pub_key_string))
priv_key = 0xa2bc5e616913c367314de49dd93bd76638411a01d2362e5a01c1418a199929fb
to_be_signed = b'\x04\x11\xf2G\x82\xb1\xa4h\xec\xa5|m\x0b\xbd0T\xd78\xd8$\x0b\xbb\xddP\xe6\xb7\xcd:mlCL|\xd6\xfe\xdf\x08U;\xa9\x1ad\x1e\xa1\x87\x03O\x92\x9d\xe7\xd1}\x85sd\x16f._?\x0c`\xd6\xfc_\xed\x9f\x1b\xac[\xad\xc3\x07\xb1\x7f\x01\xb7\xfc\x18\x12\x0f\x8f\xe1\x1a\x97\x10\xcf\xc7A\xbe\xc6Qq\xf9\xa7\xa9\x0cE\x1f\xdb\xe1~\xccua\x98U\xd4{l\xa9\xad\t\xf8\xbcV\xa4\xdc\xc9\xb6R\x9eM\xcb\xb2\xaa\x8ej\x1a\x1a\x07\xbc\xa3'
# encrypted_test = ecies.encrypt(pub_key, bytes(to_be_signed, 'utf-8'))
# decrypted_test = ecies.decrypt(priv_key, encrypted_test)
# generate a signature
# msgHash = hashlib.sha3_256(test_string.encode('utf-8'))
ecies_priv_key = ecies.hex2prv(hex(priv_key))
ecies_priv_key.public_key = ecies.hex2pub(hex(pub_key))
decrypted_result = decrypt(hex(priv_key), to_be_signed)
print('decrypted eth:')
print(decrypted_result.decode('utf-8'))
signature = ecies_priv_key.sign(decrypted_result)
print('signed with private:')
print(signature)
encoded_signature = base64.b64encode(signature)
# encoded_signature = "MEQCIFE620xZO6hRsijz+RCh0cpnYdXW56VYe2ejmgBc8enaAiBtt/ovNyFMOdM6MeS6b4VAoofToEihu7d/2M0AUdlHJg=="
print('enncoded signature: ')
print(encoded_signature)
decoded_signature = base64.b64decode(encoded_signature)
print('decoded signature')
print(decoded_signature)
ecies_pub_key = ecies.hex2pub(hex(pub_key))
result = ecies_pub_key.verify(signature, decrypted_result)
if result:
    print('matched public key verification')
else:
    print('did not match public key verification')

'''
eth_k = generate_eth_key()
sk_hex = eth_k.to_hex()  # hex string
pk_hex = eth_k.public_key.to_hex()  # hex string
data = b'this is a test'
result = decrypt(sk_hex, encrypt(pk_hex, data))
print('decrypted eth:')
print(result.decode('utf-8'))
secp_k = generate_key()
sk_bytes = secp_k.secret  # bytes
pk_bytes = secp_k.public_key.format(True)  # bytes
sec_res = decrypt(sk_bytes, encrypt(pk_bytes, data))
print('decrypted sec:')
print(sec_res.decode('utf-8'))
'''