# simple script used to generate signatures and keys
import ecies
import subprocess
import base64
from ecies import encrypt, decrypt
'''
key = ecies.utils.generate_eth_key()
priv_key = key.to_hex()
print('private key:')
print(priv_key)
pub_key = key.public_key.to_hex()
print('public key:')
print(pub_key)
'''
# generating scriptPubKey
# echo -n $PUB_KEY | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160
pub_key = 0x8b7b944c1a7312b0c41f1b3b780d96f9d1edb40aea5bbcd95cd591811363f151222434a1f7cd73765c5df6f94c1afc062bf32c02ca8da44ceeb781ff9d500165
command = 'echo -n {} | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160'.format(pub_key)
script_pub_key = subprocess.check_output(command, shell=True)
script_pub_key_string = script_pub_key.decode('utf-8')
# retrieve only the hex value generated by the scriptPubKey command
script_pub_key_string = script_pub_key_string.split(' ')[1].strip()
print('scriptPubKey: {}'.format(script_pub_key_string))
priv_key = 0xa2bc5e616913c367314de49dd93bd76638411a01d2362e5a01c1418a199929fb
to_be_signed =  b'\x04@\xde/\x16#<t\xd5\xec\xd4\x01j\x89\xba\x02\xe9\xbdH\xad\x98\xdfc\x1a\x9e\x00m\xbb\x8f\xee\x921A-\x08 t@%\xce\x93\xe5\x10\xaf\xc6\x14\x91\xef\xde\x87\xd3\xc0\xf2\x7fW 2\xb1\xe2\xf12$\xe3w\xe9\xe0Q\x05\xe5\x9f;\x15\x14\xf3\"\xfaf\xa8\xf8\xb1\x8ag\xe0$\xb6r\x13{qdM\xf1\x0c\xcb\xd2\x00R\xd1\x7f\xf5\xe4\x86\x1d\x1b\x0bZ\xd6p\xf6\xc1\x8f\xd4{\xbd\xf3K\xf4\x0b\x14\xa2#\x00\xfc\xc7\xce)\xf6\xe2v\xae\xb5}g'
# encrypted_test = ecies.encrypt(pub_key, bytes(to_be_signed, 'utf-8'))
# decrypted_test = ecies.decrypt(priv_key, encrypted_test)
# generate a signature
# msgHash = hashlib.sha3_256(test_string.encode('utf-8'))
ecies_priv_key = ecies.hex2prv(hex(priv_key))
ecies_priv_key.public_key = ecies.hex2pub(hex(pub_key))
decrypted_result = decrypt(hex(priv_key), to_be_signed)
print('decrypted eth:')
print(decrypted_result.decode('utf-8'))
signature = ecies_priv_key.sign(decrypted_result)
print('signed with private:')
print(signature)
encoded_signature = base64.b64encode(signature)
# encoded_signature = "MEQCIFE620xZO6hRsijz+RCh0cpnYdXW56VYe2ejmgBc8enaAiBtt/ovNyFMOdM6MeS6b4VAoofToEihu7d/2M0AUdlHJg=="
print('enncoded signature: ')
print(encoded_signature)
decoded_signature = base64.b64decode(encoded_signature)
print('decoded signature')
print(decoded_signature)
ecies_pub_key = ecies.hex2pub(hex(pub_key))
result = ecies_pub_key.verify(signature, decrypted_result)
if result:
    print('matched public key verification')
else:
    print('did not match public key verification')

'''
eth_k = generate_eth_key()
sk_hex = eth_k.to_hex()  # hex string
pk_hex = eth_k.public_key.to_hex()  # hex string
data = b'this is a test'
result = decrypt(sk_hex, encrypt(pk_hex, data))
print('decrypted eth:')
print(result.decode('utf-8'))
secp_k = generate_key()
sk_bytes = secp_k.secret  # bytes
pk_bytes = secp_k.public_key.format(True)  # bytes
sec_res = decrypt(sk_bytes, encrypt(pk_bytes, data))
print('decrypted sec:')
print(sec_res.decode('utf-8'))
'''